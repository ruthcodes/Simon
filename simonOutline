$(document).ready(function(){
  var on = false;
  var gameRunning = false;
  var whosTurn = "computer";
  var userButtonClick;
  var count = 0;

  var it = 0;

  //four buttons in game
  var buttons = ["red", "yellow", "green", "blue"];
  var strictMode = false;

  //code to take user input
  $( ".colour" ).each(function() {
    $(this).on("click", function(event){
      if (on && gameRunning){
       console.log(whosTurn + "whos turn is it?");
        var btnColour = $(this).attr('id');
        userMove(btnColour);
        flash(btnColour);
        playAudio(btnColour);


        if (btnColour == computerMoves[it]){
          it+=1;
          clearTimeout(userButtonClick);
          userButtonClick = setTimeout(function(){ usersTurn(btnColour); }, 5000);
        } else {
          it=0;
          wrongMove();
        }

        //users turn compares, but waits and allows next click before telling you it's wrong
        //need to force turn to wait for previous turn to resolve before allowing next (promise)

      }
    });   
  });

  //on/off switch
  $('#onOff :checkbox').change(function() { 
    if (this.checked) {
      on = false;
      reset();
      $("#counter").css('color', '#58655C');
      $("#counter").text('00');
      strictMode = false;
      $(".fa").css('visibility', 'hidden');
    } else {
      on = true;
      $("#counter").css('color', 'white');
      flash("red");
      playAudio("red");
      setTimeout(function(){ flash("blue"); playAudio("blue"); }, 500);  
      setTimeout(function(){ flash("yellow"); playAudio("yellow"); }, 1000); 
      setTimeout(function(){ flash("green"); playAudio("green"); }, 1500); 
    }
  });

  $("#strict").on("click", function(e){
    if (on){
      if (!strictMode){
        strictMode = true;
        $(".fa").css('visibility', 'visible');
      } else {
        strictMode = false;
        $(".fa").css('visibility', 'hidden');
      }
    }
  });

  $("#start").on("click", function(e){

    if (on){
      gameRunning = true;
      play();
      /* selectMove();
      setTimeout(function(){ wrongMove(); }, 2000); */
    }
  });

  function flash(btnColor){
    if(on){
      var flashColor;
      var defaultColor;
      switch(btnColor) {
        case "red":
          flashColor = "red";
          defaultColor = 'linear-gradient(#BB2825 0%, #CF2824 5%, #C91B1C 50%, #CF2824 100%)';
          break;
        case "green":
          flashColor = "green";
          defaultColor = "linear-gradient(#038845 0%, #27AD60 5%, #00974A 50%,#27AD60 95%, #038845 100%";
          break;
        case "yellow":
          flashColor = "yellow";
          defaultColor = "linear-gradient(#D7C017 0%, #DAC014 5%, #D7BE19 50%, #DAC014 100%";
          break;
        case "blue":
          flashColor = "blue";
          defaultColor = "linear-gradient(#0066B2 0%, #0292D0 5%, #0278BE 50%, #0292D0 100%";
          break;
      }

      $('#' + btnColor).css('background', flashColor);
      setTimeout(function(){ $('#' + btnColor).css('background',defaultColor); }, 500);                  
    }
  }

  function reset(){
    counter = 0;
    computerMoves = [];
    userMoves = [];

  }

  // user story: I can see how many steps are in the series
  //length of computerMoves array
  var counter = 0;

  //to save series of ranndomly chosen steps
  var computerMoves = [];
  //to save user moves (must be compared as they are entered)
  //- possibly dont want to save them in an arrays
  var userMoves = [];

  //function to start game
  //loop, run while computerMoves.length < 20  && !exit && on
  //call this function recursively set interval, clicking start clears the interval and calls it again
  // var myVar = setTimeout(function(){ play() }, 500);

  function play(skip){
    console.log("comps turn");
    whosTurn="computer";
    console.log(whosTurn);

    if (on){

      //chose computer move and play it
      //selectMove will return a resolved promise once finished running

      //if playing after WrongMove, dont select moves again, just play them
      if(skip === undefined){
        selectMove();
      }

      //wait for input from user
      playMoves().then(function(){
        it=0;
        whosTurn = "human";



        //if the user doesnt press something in 5 seconds
        //this is not right, maybe change setTimeout to be only on the if, have all the else code separate


      });


      //if you dont receive input within 5 seconds, wrongMove()

      //after user input, compare user input to computerMoves

      //if different, wrongMove() and either quit or replay computer move

      //end loop

    }
  }
  // wrongMove needs to quit game or replay depending on strict, and set counter
  function wrongMove(){
    console.log("uh oh wrong");
    clearTimeout(userButtonClick);
    $("#counter").text("--");
    if (strictMode){
      counter = 0;
      setTimeout(function(){ $("#counter").text("00"); }, 500); 
      computerMoves = [];
      userMoves = [];
    } else {
      userMoves = [];
      setTimeout(function(){ if (counter <10){
        $("#counter").text("0" + counter);
      } else {
        $("#counter").text(counter);
      }; }, 500); 
    }
    flash("red");
    flash("blue");
    flash("yellow");
    flash("green");
    playAudio("blue");

    if(strictMode){
      setTimeout(function(){ play(); }, 2000);
    }else{
      setTimeout(function(){ play("skip"); }, 2000);
    }

  }
  //function to randomly select one of the vars
  //and push to computerMoves array
  function selectMove(){
    var move = buttons[Math.floor(Math.random()*buttons.length)];

    computerMoves.push(move);
    counter +=1;
    if (counter <10){
      $("#counter").text("0" + counter);
    } else {
      $("#counter").text(counter);
    }
   
  }

  //function for user to play moves
  //and push to userMoves array
  function userMove(entered){
    userMoves.push(entered);
  }


  //need to compare every move, not all moves
  //wait 5 seconds, then check if move == comp
  //user button click should start and stop the timers.
  //if it is and usermove length is less than compmove length, call usersTurn again
  // if it matches and lengths are the same, call play
  //if it doesnt match, call wrong move
  function usersTurn(move){
    //needs to only take one move at a time (will take green, yellow, which doesnt match green)

      if(userMoves.length == computerMoves.length){
        clearTimeout(userButtonClick);
        whosTurn="computer";
        play();
      } 
   

    /*  if (userMoves.length == computerMoves.length){
      return compare();
    }
    console.log("userMoves and length: " + userMoves.length + " , " + userMoves);
    console.log("countMoves: " + countMoves);
    myTimer = setTimeout(function(){if (userMoves.length < countMoves){
      return wrongMove();
    } else {
      countMoves += 1;
      return usersTurn();
    }
                          ;}, intvl);*/
    //function needs to wait 3 seconds for a move
    //if no move in timeframe, reject promise and call wrong move
    //if moved, reset timer to 3 seconds and wait for next move
    //keep doing that until userMoves.length == computerMoves.length
    //return resolved promise
  };


  //function to compare user input to moves array
  //empty moves after compare

  //instead of returning true/false, return play or wrong
  //need to make sure that moves are wiped every time loop starts again
  function compare(){
    countMoves = 1;
    for (var i=0; i<computerMoves.length; i++){
      if (computerMoves[i] != userMoves[i]){
        userMoves = [];
        return wrongMove();
      }
    }

    userMoves = [];
    return play();
  }

  function playAudio(colour){
    if (on){
      var file;
      switch(colour) {
        case "red":
          file="https://s3.amazonaws.com/freecodecamp/simonSound1.mp3";
          break;
        case "green":
          file="https://s3.amazonaws.com/freecodecamp/simonSound2.mp3"
          break;
        case "yellow":
          file="https://s3.amazonaws.com/freecodecamp/simonSound3.mp3"
          break;
        case "blue":
          file="https://s3.amazonaws.com/freecodecamp/simonSound4.mp3"
          break;
      }
      var audio = new Audio(file);
      audio.play();
    }
  }

  var interval = 1000; 

  function playMoves(){

    userMoves = [];

    var promise = Promise.resolve();
    computerMoves.forEach(function (i) {
      promise = promise.then(function () {
        flash(i);
        playAudio(i);
        return new Promise(function (resolve) {
          setTimeout(resolve, interval);
        });
      });
    });
    //returns a resolved promised once down, to chain next function from

    return Promise.resolve();

  };
});


/*while (computerMoves.length < 20  && !exit && on){
  play();
}*/

